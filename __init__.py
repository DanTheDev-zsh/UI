# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file '__init__.ui'
#
# Created by: PyQt5 UI code generator 5.15.9
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QMainWindow
from PyQt5.QtCore import Qt, QTimer
import plugins.validate as validate
from plugins.initPalettes import initPalettes
from plugins.prompts import prompts
from plugins.readWrite import append_CSV
import pyperclip  # type: ignore
import random


TOOLTIP = "Type:"
TOOLTIPR = "r - enter a number(listing price), generate an offer message based on discount percent and listing price, then put in cvs log file"
TOOLTIPESCENT = "ESC - enter detail mode"
TOOLTIPQ = "q - close program"
TOOLTIPD = "d - allows detailed info to be entered on the last number put in record"
TOOLTIPO = "o - opens the log file"
TOOLTIPESCEXIT = "ESC - exit detail mode"


class Ui_MainWindow(QMainWindow):
    def __init__(self, parent=None):
        QMainWindow.__init__(self, parent=parent)
        self.setupUi(self)

    menuFlag: bool = False
    lastEntered: str = ""
    discountPercentage = 5

    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1200, 850)

        initPalettes(self)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.centralwidget.setPalette(self.mainBackgroundPalette)
        self.centralwidget.setAutoFillBackground(True)

        self.frameDisplay = QtWidgets.QFrame(self.centralwidget)
        self.frameDisplay.setGeometry(QtCore.QRect(30, 140, 831, 391))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.frameDisplay.setFont(font)
        self.frameDisplay.setFrameShape(QtWidgets.QFrame.StyledPanel)
        self.frameDisplay.setFrameShadow(QtWidgets.QFrame.Raised)
        self.frameDisplay.setObjectName("display frame")

        self.lineEdit = QtWidgets.QLineEdit(self.frameDisplay)
        self.lineEdit.setGeometry(QtCore.QRect(50, 180, 411, 51))
        self.lineEdit.setObjectName("lineEdit")
        self.lineEdit.returnPressed.connect(self.handler)

        self.scrollBar = QtWidgets.QScrollBar(MainWindow)
        self.scrollBar.setGeometry(QtCore.QRect(1000, 200, 30, 200))
        self.scrollBar.setObjectName("discount scrollbar")
        self.scrollBar.setMaximum(15)
        self.scrollBar.setMinimum(5)
        self.scrollBar.setValue(5)
        self.scrollBar.valueChanged.connect(self.scrollAction)

        self.scrollLabel = QtWidgets.QLabel(MainWindow)
        self.scrollLabel.setGeometry(QtCore.QRect(850, 240, 100, 40))
        self.scrollLabel.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop
        )
        self.scrollLabel.setObjectName("scroll label")
        self.scrollLabel.setWordWrap(True)
        self.scrollLabel.setPalette(self.mainBackgroundPalette)

        # the dialogue element is used to communicate with user mainly
        self.dialogue = QtWidgets.QLabel(self.frameDisplay)
        self.dialogue.setGeometry(QtCore.QRect(20, 250, 781, 131))
        self.dialogue.setAlignment(
            QtCore.Qt.AlignLeading | QtCore.Qt.AlignLeft | QtCore.Qt.AlignTop
        )
        self.dialogue.setObjectName("dialogue")
        self.dialogue.setWordWrap(True)

        # group box contains tooltips for user
        self.groupBox = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox.setGeometry(QtCore.QRect(30, 580, 1140, 220))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.groupBox.setFont(font)
        self.groupBox.setObjectName("Group Box")
        self.groupBox.setPalette(self.backgroundPaletteLightGrayTextBlue)
        self.groupBox.setAutoFillBackground(True)

        # ------ TOOLTIP ELEMENTS INITIALIZE ------
        # TOOLTIP
        # TOOLTIPR
        # TOOLTIPESCENT
        self.tooltipLabelPress = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelPress.setGeometry(QtCore.QRect(20, 24, 791, 16))
        self.tooltipLabelPress.setObjectName("Press Label")
        self.tooltipLabelPress.setAlignment(Qt.AlignTop | Qt.AlignLeft)

        self.tooltipLabelR = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelR.setGeometry(QtCore.QRect(20, 48, 791, 16))
        self.tooltipLabelR.setWordWrap(True)
        self.tooltipLabelR.setObjectName("r")
        self.tooltipLabelR.setAlignment(Qt.AlignTop | Qt.AlignLeft)

        self.tooltipLabelESCEnt = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelESCEnt.setGeometry(QtCore.QRect(20, 72, 791, 16))
        self.tooltipLabelESCEnt.setObjectName("ESC Detailed")
        self.tooltipLabelESCEnt.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.tooltipLabelESCEnt.setPalette(self.paletteBlack)

        # TOOLTIPQ
        # TOOLTIPD
        # TOOLTIPO
        # TOOLTIPESCEXIT
        self.tooltipLabelQ = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelQ.setGeometry(QtCore.QRect(20, 48, 791, 16))
        self.tooltipLabelQ.setWordWrap(True)
        self.tooltipLabelQ.setObjectName("q")
        self.tooltipLabelQ.setAlignment(Qt.AlignTop | Qt.AlignLeft)

        self.tooltipLabelD = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelD.setGeometry(QtCore.QRect(20, 72, 791, 16))
        self.tooltipLabelD.setWordWrap(True)
        self.tooltipLabelD.setObjectName("d")
        self.tooltipLabelD.setAlignment(Qt.AlignTop | Qt.AlignLeft)

        self.tooltipLabelO = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelO.setGeometry(QtCore.QRect(20, 96, 791, 16))
        self.tooltipLabelO.setWordWrap(True)
        self.tooltipLabelO.setObjectName("o")
        self.tooltipLabelO.setAlignment(Qt.AlignTop | Qt.AlignLeft)

        self.tooltipLabelESCExit = QtWidgets.QLabel(self.groupBox)
        self.tooltipLabelESCExit.setGeometry(QtCore.QRect(20, 120, 791, 16))
        self.tooltipLabelESCExit.setWordWrap(True)
        self.tooltipLabelESCExit.setObjectName("ESC Normal")
        self.tooltipLabelESCExit.setAlignment(Qt.AlignTop | Qt.AlignLeft)
        self.tooltipLabelESCExit.setPalette(self.paletteBlack)
        # ------ FINISH TOOLTIP ELEMENTS INITIALIZE ------

        self.titleLabel = QtWidgets.QLabel(self.centralwidget)
        self.titleLabel.setGeometry(QtCore.QRect(60, 40, 361, 71))
        font = QtGui.QFont()
        font.setPointSize(28)
        self.titleLabel.setFont(font)
        self.titleLabel.setObjectName("titleLabel")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1000, 22))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        self.statusbar.setPalette(self.paletteRed)
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.dialogue.setText(
            _translate("MainWindow", "select the white bar above to start")
        )
        self.groupBox.setTitle(_translate("MainWindow", "Command Bar"))
        self.scrollLabel.setText(
            _translate("MainWindow", "Default discount percentage: 5%")
        )
        self.tooltipLabelPress.setText(_translate("MainWindow", TOOLTIP))
        self.tooltipLabelR.setText(_translate("MainWindow", TOOLTIPR))
        self.tooltipLabelESCEnt.setText(_translate("MainWindow", TOOLTIPESCENT))
        self.tooltipLabelQ.setText(_translate("MainWindow", ""))
        self.tooltipLabelD.setText(_translate("MainWindow", ""))
        self.tooltipLabelO.setText(_translate("MainWindow", ""))
        self.tooltipLabelESCExit.setText(_translate("MainWindow", ""))
        self.titleLabel.setText(_translate("MainWindow", "Daniel's Offer App"))

    # see each letter key press for individual functionality
    def handler(self) -> None:
        input = self.lineEdit.text()
        self.lineEdit.clear()

        # exits the app
        if self.menuFlag and input == "q":
            sys.exit(app.exec_())

        # allows input of a number
        if not self.menuFlag and input == "r":
            self.lastEntered = "r"
            self.tooltipLabelR.setPalette(self.paletteGreen)
            self.dialogue.setText("In Recording mode")
            return

        if not self.menuFlag and self.lastEntered == "r":
            if not validate.isNumFloat(input):
                self.tooltipLabelR.setPalette(self.paletteBlue)
                self.dialogue.setText("see status bar below")
                QTimer.singleShot(1500, lambda: self.dialogue.clear())
                self.statusbar.showMessage(
                    "you must enter an integer or float, you've enter the type"
                    + str(type(input))
                    + ", use just numbers and floats, no letters",
                    3500,
                )
                return
            totalDiscountAmount = self.totalDiscount(input)
            formatedInput = self.formatDollars(input)
            total_after_discount = self.total(input, totalDiscountAmount)
            self.dialogue.setText(
                f"you've entered: ${formatedInput}\namount discounted after {self.discountPercentage}%: ${self.formatDollars(totalDiscountAmount)}\n"
                + f"total after discount: ${total_after_discount}\nthis information is recorded in the logs/record.csv file"
            )
            append_CSV(formatedInput, self.discountPercentage, total_after_discount)
            self.showCopied(input)
            pass

            self.lastEntered = ""
            self.tooltipLabelR.setPalette(self.paletteBlue)
            return

        if (
            self.menuFlag and input == "d"
        ):  # TODO: add a detailed mode, prefer a popup window that allows user input more info, such as buyer name/item id
            self.lastEntered = "d"
            self.tooltipLabelD.setPalette(self.paletteGreen)
            return

        if self.menuFlag and self.lastEntered == "d":  # see above
            self.lastEntered = ""
            self.tooltipLabelD.setPalette(self.paletteBlue)
            return

        if (
            self.menuFlag and input == "o"
        ):  # TODO: opens the json log file and show graphs and such
            self.lastEntered = "o"
            self.tooltipLabelO.setPalette(self.paletteGreen)
            return

        if self.menuFlag and self.lastEntered == "o":  # see above
            self.lastEntered = ""
            self.tooltipLabelO.setPalette(self.paletteBlue)
            return

    # input has to be unformatted, returns formatted
    def formatDollars(self, input: str) -> str:
        rounded = float("%.2f" % float(input))
        return f"{rounded:,}"

    # input has to be unformatted, returns unformatted
    def totalDiscount(self, dollars: str) -> str:
        return str(float(dollars) * (self.discountPercentage / 100))

    def total(self, price: str, discount: str) -> str:
        final = str(float(price) - float(discount))
        return self.formatDollars(final)

    def keyPressEvent(self, e) -> None:
        if e.key() == Qt.Key_Escape:  # type: ignore
            self.ESCToggle()

    # switch between the two sets of tooltips
    def ESCToggle(self) -> None:
        if self.lastEntered:
            self.lastEntered = ""
            self.tooltipLabelR.setPalette(self.paletteBlue)
            self.tooltipLabelD.setPalette(self.paletteBlue)
            self.tooltipLabelO.setPalette(self.paletteBlue)
        if self.menuFlag:
            self.menuFlag = False
            self.tooltipLabelR.setText(TOOLTIPR)
            self.tooltipLabelESCEnt.setText(TOOLTIPESCENT)
            self.tooltipLabelQ.clear()
            self.tooltipLabelD.clear()
            self.tooltipLabelO.clear()
            self.tooltipLabelESCExit.clear()
            return
        else:
            self.menuFlag = True
            self.tooltipLabelR.clear()
            self.tooltipLabelESCEnt.clear()
            self.tooltipLabelQ.setText(TOOLTIPQ)
            self.tooltipLabelD.setText(TOOLTIPD)
            self.tooltipLabelO.setText(TOOLTIPO)
            self.tooltipLabelESCExit.setText(TOOLTIPESCEXIT)
        return

    def showCopied(self, total: str):
        discount = self.formatDollars(self.totalDiscount(total))
        finalTotal = self.total(total, discount)
        message = prompts[random.randint(0, 2)]
        message = message.format(discount=discount, total=finalTotal)
        pyperclip.copy(message)
        QTimer.singleShot(
            3000,
            lambda: self.dialogue.setText(f"message copied to Clipboard:\n{message}"),
        )
        pass

    def scrollAction(self) -> None:
        value: int = self.scrollBar.value()
        self.scrollLabel.setText(f"Discount percentage: {value}%")
        self.discountPercentage = value
        return


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    window = Ui_MainWindow()
    window.show()
    sys.exit(app.exec_())
